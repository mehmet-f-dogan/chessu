// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Course {
  id            String       @id @default(uuid())
  title         String
  subtitle      String
  description   String
  tags          String[]
  image_url     String
  isPromotional Boolean      @default(false)
  isMembersOnly Boolean      @default(false)
  chapters      Chapter[]
  contents      Content[]
  purchases     Purchase[]
  completions   Completion[]
}

model Chapter {
  id            String       @id @default(uuid())
  title         String
  isPromotional Boolean      @default(false)
  course        Course       @relation(fields: [courseId], references: [id])
  courseId      String
  contents      Content[]
  completion    Completion[]
}

enum ContentType {
  VIDEO
  STUDY
  QUIZ
}

model Content {
  id         String       @id @default(uuid())
  title      String
  type       ContentType
  data       Json
  course     Course       @relation(fields: [courseId], references: [id])
  courseId   String
  chapter    Chapter      @relation(fields: [chapterId], references: [id])
  chapterId  String
  completion Completion[]
}

model User {
  id               String      @id
  stripeCustomerId String?
  membership       Membership?
  completion       Completion?
  purchases        Purchase[]
}

model Membership {
  id        String   @id @default(uuid())
  untilDate DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Purchase {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model Completion {
  id       String    @id @default(uuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  courses  Course[]
  chapters Chapter[]
  contents Content[]
}
